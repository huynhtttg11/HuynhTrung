########## vulas:a2c, vulas:t2c

# Limits the analysis to certain bugs (multiple values separated by comma)
# If empty, all relevant bugs retrieved from backend will be considered
# Default: empty
vulas.reach.bugs = 

# Analysis framework to be used
# Possible values: wala, soot
vulas.reach.fwk = wala

# Whether or not to stop the CG analysis as soon as entry points 
# supposed to be used for the callgraph construction cannot be found by the 
# analysis framework. If true, any entry point missing in the call graph will 
# terminate the analysis, if false, as long as there is one entrypoint is found, 
# the analysis will be performed
vulas.reach.exitOnUnknownEntryPoints = false

# Regex to filter entry points (semicolon separated)
vulas.reach.constructFilter = 

# All packages to be excluded from call graph construction, packages 
# are separated by semicolon e.g. [java/.*;sun/.*]. Defaults for the different 
# analysis frameworks are provided in the respective configuration files.
vulas.reach.excludePackages =

# All JAR files to be excluded from call graph construction (multiple entries to be separated by comma)
# 
# Default: WebServicesAgent.jar (from Wily Introscope, an app perf monitoring tool that has invalid manifest header fields creating problems for Wala)
vulas.reach.excludeJars = WebServicesAgent.jar

# Whether or not to preprocess dependencies (during which some 
# Manifest file entries that proved to break the CG analysis will be removed)
vulas.reach.preprocessDependencies = true

# Dir to search for app source files (only vulas:a2c)
# If empty, they will be fetched from backend
vulas.reach.sourceDir =

# Timeout for reachability analysis (in mins)
# Default: 120 mins
vulas.reach.timeout = 120

# Max number of paths uploaded for a reachable change list element
vulas.reach.maxPathPerChangeListElement = 10

# Basic (JRE) packages
vulas.reach.blacklist.classes.jre    = java., sun, com.sun, org.xml, org.ietf, org.jcp, org.omg, com.ibm.wala

# JUnit and surefire plugin
vulas.reach.blacklist.classes.custom = org.apache.maven.surefire, org.junit, com.sap.psr.vulas

# Whether or not to collect touch points
# Default: true
vulas.reach.identifyTouchpoints = true

# Whether to search for the shortest path(s) from entry points to vulnerable constructs, or to quit after the first path found
# Default: true
vulas.reach.searchShortest = true

# Beta: Write the call graph to a file
#vulas.reach.callgraph.writeTo = 

# Beta: Read the call graph from a file
#vulas.reach.callgraph.readFrom =

# Dir to search for app source files (only command-line interface)
vulas.reach.cli.plugins.dir = plugins