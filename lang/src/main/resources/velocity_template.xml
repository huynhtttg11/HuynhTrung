<?xml version="1.0" encoding="UTF-8"?>
<vulas-report>

	<!-- Metadata -->
	<generatedAt>$generatedAt</generatedAt>
	<generatedFor>
		<space>$space.getSpaceToken()</space>
		<groupId>$app.getMvnGroup()</groupId>
		<artifactId>$app.getArtifact()</artifactId>
		<version>$app.getVersion()</version>
	</generatedFor>
	
	<!-- Aggregation info -->
	<isAggregated>$isAggregated</isAggregated>
	
	#if($isAggregated)
		<aggregatedModules>
		#foreach( $prj in $projects)
			<groupId>$prj.getMvnGroup()</groupId>
			<artifactId>$prj.getArtifact()</artifactId>
			<version>$prj.getVersion()</version>
		#end
		</aggregatedModules>
	#else
		<aggregatedModules></aggregatedModules>
	#end
	
	<!-- Configuration -->
	<configurations>
		<configuration>
			<name>exceptionThreshold</name>
			<value>$exceptionThreshold</value>
		</configuration>
		<configuration>
			<name>exceptionScopeBlacklist</name>
			<value>$exceptionScopeBlacklist</value>
		</configuration>
		<configuration>
			<name>exceptionExcludedBugs</name>
			<value>$exceptionExcludedBugs</value>
		</configuration>
	</configurations>
	
	<!-- Vulnerabilities -->
	<vulnerabilities>
		
		#foreach( $vul in $vulnsToReport )
		<vulnerability>
		
			<!-- Removed with Vulas v3: <bugId>$vul.bugid</bugId> -->
		
			<bug>
				<id>$vul.bug.getBugId()</id>
				<cvssScore>$vul.bug.getCvssScore()</cvssScore>
				<cvssVersion>$vul.bug.getCvssVersion()</cvssVersion>
			</bug>			
			
			
			<!-- The library containing vulnerable code -->
			<filename>$vul.filename</filename>
			<sha1>$vul.archiveid</sha1>
						
			#foreach( $analysis in $vul.analyses )
			<module>
			
				<!-- The application under analysis (module in case of aggregated reports) -->
				<groupId>$analysis.getApp().getMvnGroup()</groupId>
				<artifactId>$analysis.getApp().getArtifact()</artifactId>
				<version>$analysis.getApp().getVersion()</version>
				
				<!-- Link to the frontend with detailled analysis results -->
				<href>$vulas-backend-serviceUrl/../apps/#/$space.getSpaceToken()/$analysis.getApp().getMvnGroup()/$analysis.getApp().getArtifact()/$analysis.getApp().getVersion()</href>
				
				<!-- Details regarding the dependency of the app/module on the library containing vulnerable code -->
				<scope>$analysis.getDep().getScope()</scope>
				<isTransitive>$analysis.getDep().getTransitive()</isTransitive>
				
				<!-- The result of the containment check, which checks whether the given library contains vulnerable code or not (possible values: true, historical, unknown) -->
				#if( $analysis.isAffectedVersion() && $analysis.isAffectedVersionConfirmed() )
					<containsVulnerableCode>true</containsVulnerableCode>
				#elseif( $analysis.isNoneAffectedVersion() )
					<containsVulnerableCode>historical</containsVulnerableCode>
				#elseif( !$analysis.isAffectedVersionConfirmed() )
					<containsVulnerableCode>unknown</containsVulnerableCode>
				#end
				
				<!-- The result of the static analysis, which determines whether vulnerable code can be potentially executed (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
				#if( !$analysis.isNoneAffectedVersion())
					#if( $analysis.isReachable() )
						<potentiallyExecutesVulnerableCode>vulnerableLibraryCode</potentiallyExecutesVulnerableCode>
					#elseif( $analysis.isNotReachable() )
						<potentiallyExecutesVulnerableCode>nonVulnerableLibraryCode</potentiallyExecutesVulnerableCode>
					#elseif( !$analysis.isReachableConfirmed() )
						<potentiallyExecutesVulnerableCode>noLibraryCodeAtAll</potentiallyExecutesVulnerableCode>
					#end					
				#else
					<potentiallyExecutesVulnerableCode>notApplicable</potentiallyExecutesVulnerableCode>
				#end				
				
				<!-- The result of the dynamic analysis, which observes the execution of vulnerable code (possible values: vulnerableLibraryCode, nonVulnerableLibraryCode, noLibraryCodeAtAll, notApplicable) -->
				#if( !$analysis.isNoneAffectedVersion())
					#if( $analysis.isTraced() )
						<actuallyExecutesVulnerableCode>vulnerableLibraryCode</actuallyExecutesVulnerableCode>
					#elseif( $analysis.isNotTraced() )
						<actuallyExecutesVulnerableCode>nonVulnerableLibraryCode</actuallyExecutesVulnerableCode>
					#elseif( !$analysis.isTracedConfirmed() )
						<actuallyExecutesVulnerableCode>noLibraryCodeAtAll</actuallyExecutesVulnerableCode>
					#end					
				#else
					<actuallyExecutesVulnerableCode>notApplicable</actuallyExecutesVulnerableCode>
				#end		
				
			</module>
			#end		
		</vulnerability>
		#end
	</vulnerabilities>
</vulas-report>